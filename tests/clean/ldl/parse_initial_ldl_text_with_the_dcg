
#parse the "++" text through the initial grammar

{(?x0 ?grammar ?nont) :parse_nonterminal (?rest ?ast ?depth)} <= {
	?depth_predecessor :has_succ ?depth.
	?rule :memberof ?grammar. 
		#:dummy tau_builtins:output "testing rule lhs...".
	?rule :lhs ?nont. ?rule :rhs ?rhs.
		:dummy tau_builtins:output ?nont.
		:dummy tau_builtins:output "rule...".
	(?x0 ?grammar ?nont ?rhs) :parse_rhs (?rest ?ast ?depth_predecessor).
}.

{(?x0 ?grammar ?type rdf:nil) :parse_rhs (?rest ?ast ?depth)} <= {
	?ast a :node. ?ast :type ?type. ?ast :children rdf:nil.
}.

{(?x0 ?grammar ?type (?one_rhs_item)) :parse_rhs (?rest ?ast ?depth)} <= {
	(?x0 ?grammar ?type ?one_rhs_item) :parse_rhs_item (?rest ?ast ?depth).
}.

{(?x0 ?grammar ?type ?rhs) :parse_rhs (?rest ?ast ?depth)} <= {
    ?rhs rdf:rest ?rhs2_not_nil. ?rhs2_not_nil rdf:rest ?rhs3.
	?ast a :node. ?ast :type ?type. ?ast :children ?ch.
	(?x0 ?grammar ?rhs) :parse_rhs_items (?rest ?ch ?depth).
}.

{(?x0 ?grammar ?rhs_) :parse_rhs_items (?rest ?ch_ ?depth)} <= {
		#:dummy tau_builtins:output "parse_rhs_items".
	(?x0 ?grammar ?rhsf) :parse_rhs_item (?after_item ?chf ?depth).
	(?after_item ?grammar ?rhsr) :parse_rhs_items (?rest ?chr ?depth).
}.

{(?x0 ?grammar ?rhs_item) :parse_rhs_item (?rest ?ast ?depth)} <= {
	?rhs_item a :literal. ?rhs_item :value ?dcgv. 
		#:dummy tau_builtins:output "parse_rhs_item(lit):".
	?astv string_builtins:strXlst ?dcgv. 
		:dummy tau_builtins:output "parse_rhs_item(lit):".
		?dummy tau_builtins:output ?astv.
	?ast a :literal. ?ast :value ?astv.
	:dummy :literally_list (?x0 ?rest ?dcgv).
	    ?dummy tau_builtins:output ?astv.
	    ?dummy tau_builtins:output "matches".
}.

{(?x_ ?grammar ?rhs_item) :parse_rhs_item (?xr ?ast ?depth)} <= {
	?rhs_item a :any_char_except. ?rhs_item :value ?except.
		:dummy tau_builtins:output "parse_rhs_item(any char except):".
	?xf string_builtins:any_char_except ?except.
 	?ast a :literal. ?ast :value ?xf.
}.

{(?x0 ?grammar ?rhs_item) :parse_rhs_item (?rest ?ast ?depth)} <= {
	?rhs_item a :all_chars_until_one_of. ?rhs_item :value ?except.
	    :dummy tau_builtins:output "parse_rhs_item(all_chars_until_one_of):".
 	?ast a :literal. ?ast :value ?string.
	?x0 :all_chars_until_one_of (?rest ?except ?char_list).
    ?string string_builtins:strXlst ?char_list.
}.

{?a0 :parse_rhs_item ?a1} <= {
    (?x0 ?grammar [a :identifier. :name ?name]) :eq ?a0. ?a1 :eq (?rest ?ast ?depth).
		#"parse_rhs_item(nont):". :say ?name.
	(?x0 ?grammar ?name) :parse_nonterminal (?rest ?ast ?depth).
}.

{(?x0 ?grammar ?rhs_item) :parse_rhs_item (?rest ?ast ?depth)} <= {
	?rhs_item a :builtin_postprocessed. ?rhs_item :value ?raw_identifier.
	(?x0 ?grammar ?raw_identifier) :parse_nonterminal (?rest ?raw_ast ?depth).
	?raw_ast :postprocess ?ast.
}.

{?x_ :all_chars_until_one_of (?rest ?except ?char_list_).} <= {
    ?xf string_builtins:any_char_except ?except.
    ?char_listf :eq ?xf.
    ?xr :all_chars_until_one_of (?rest ?except ?char_listr).
}.

{?x_ :all_chars_until_one_of (?x_ ?except rdf:nil).} <= {
    ?except string_builtins:strXlst ?except_list.
    ?xf :memberof ?except_list.
}.

{?raw :postprocess ?cooked} <= {
    ?raw :eq [a :node. :type ?type. :children ?ch].
    "" :say ("postprocess " ?type).
    ?type :eq "string_literal_raw_body".
    ?cooked :eq [a :literal. :type :string_literal_body. :value ?v].
    ?v_list :is_collected_string_literal_raw_body ?raw.
    ?v string_builtins:strXlst ?v_list.
}.

{rdf:nil :is_collected_string_literal_raw_body ?raw} <= {
    ?raw :children rdf:nil.
}.

{?v_ :is_collected_string_literal_raw_body ?raw} <= {
    ?raw :children ([:children (?literal)] ?tail).
    ?vf :eq :literal.
    ?vr :is_collected_string_literal_raw_body ?tail.
}.


