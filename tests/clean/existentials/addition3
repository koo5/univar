@keywords a .
@prefix rdf:      <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

kb

#â€” Existence of lists
?builtins_aware_list rdf:first ?ITEM; rdf:rest ?REST.

:zero a :Nat.
{?y :has_succ ?x. ?x a :Nat} <= {?y a :Nat}.

{(:zero ?y) :has_sum ?y.} <= { ?y a :Nat}.
{(?sx ?y)  :has_sum ?sz } <= {?x :has_succ ?sx. ?z :has_succ ?sz. (?x ?y) :has_sum ?z.}.
fin.

#0
query
(:zero :zero) :has_sum :zero.
fin.
shouldbetrue

#1
query
(:zero ?one) :has_sum ?one. :zero :has_succ ?one.
fin.
shouldbetrue

#2
query
(?three ?five) :has_sum ?eight. 
:zero :has_succ ?one. 
?one :has_succ ?two.
?two :has_succ ?three.
?three :has_succ ?four.
?four :has_succ ?five.
?five :has_succ ?six.
?six :has_succ ?seven.
?seven :has_succ ?eight.
?eight :has_succ ?nine.
?nine :has_succ ?ten.
fin.
shouldbe
#we cant build up a nat starting from three down(in the has_sum rule body, by calling has_succ), ep check has to cut that
#newsflash:ok apparently this should be supported
fin.

