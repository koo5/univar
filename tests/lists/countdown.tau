#The Countdown
 
kb
#digits
0 a Nat.
1 a Nat.
2 a Nat.
3 a Nat.
4 a Nat.
5 a Nat.
6 a Nat.
7 a Nat.
8 a Nat.
9 a Nat.
 
#order
1 prev 0.
2 prev 1.
3 prev 2.
4 prev 3.
5 prev 4.
6 prev 5.
7 prev 6.
8 prev 7.
9 prev 8.
 
 
#check if digit ?x is greater than digit ?y
{ ?x prev ?y . } => { ?x digit_gt ?y . } .
{ ?x digit_gt ?y . ?y digit_gt ?z . } => { ?x digit_gt ?z . } .
 
 
#take a list and check if it's all 0's
() isallzeroes t.
{?r rdf:first 0. ?r rdf:rest ?q. ?q isallzeroes t.} => {?r isallzeroes t}.
 
{?r rdf:first ?x. ?x digit_gt 0.} => {?r isallzeroes f}.
{?x rdf:first 0. ?r rdf:rest ?q. ?q isallzeroes f.} => {?r isallzeroes f}.
 
 
#listappend: this forces an (?a . ?b) list in the subject to bind to something in the object.
() append ().
{?x rdf:first ?f.} => {?x append ?x}.
 
 
#take a list and return one with all 9's
() makeallnines ().
{?x rdf:first ?f. ?x rdf:rest ().} => {?x makeallnines (9)}.
{?x rdf:first ?f. ?x rdf:rest ?r. ?r rdf:first ?q. ?r makeallnines ?z. (9 ?z) append ?y} => {?x makeallnines ?y}.
 
 
#normalize input: trim leading 0's and fail if it contains any items that aren't nats.
{?x rdf:first ?f. ?f a Nat. ?r normalize2 ?r.} => {?x normalize2 ?x}.
{?x rdf:first ?f. ?f digit_gt 0. ?x rdf:rest ?r. ?r normalize2 ?r} => {?x normalize ?x}.
{?x rdf:first 0. ?x rdf:rest ?r. ?r normalize ?y} => {?x normalize ?y}.
 
 
#get previous number
{?x rdf:rest ?r. ?r isallzeroes t. ?x rdf:first ?f. ?f prev ?prev. ?r makeallnines ?nines. (?prev ?nines) append ?y.} => {?x succ2 ?y}.
{?x rdf:rest ?r. ?r isallzeroes f. ?x rdf:first ?f. ?r succ2 ?p. (?f ?p) append ?y} => {?x succ2 ?y}.
 
 
{?x rdf:rest ?r. ?r isallzeroes t. ?x rdf:first ?f. ?f digit_gt 1. ?f prev ?prev. ?r makeallnines ?nines. (?prev ?nines) append ?y.} => {?x succ ?y}.
{?x rdf:rest ?r. ?r isallzeroes t. ?r rdf:first ?dummy. ?x rdf:first 1. ?r makeallnines ?y} => {?x succ ?y}.
{?x rdf:rest ?r. ?r isallzeroes f. ?x rdf:first ?f. ?r succ2 ?p. (?f ?p) append ?y.} => {?x succ ?y}.
 
 
 
#countdown
() countdown2 done.
(0) countdown2 done.
(1) succ (0).
{?x succ ?y. ?y countdown2 ?z} => {?x countdown2 ?z}.
 
#don't start the countdown if we can't normalize the input, otherwise proceed
#{?x normalize ?z. ?z countdown2 ?y.} => {?x countdown ?y}.
{?z countdown2 ?y} => {?x countdown ?y}.

fin.
 
query

(0) countdown done.

fin.
