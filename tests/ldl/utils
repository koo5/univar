{?builtins_aware_list rdf:first ?ITEM; rdf:rest ?REST.}<={}.

{?X :eq ?X.} <= {}.

:zero a :nat.
{?x a :nat. ?y :has_succ ?x. } <= {?y a :nat}.

:minus_one a :negative_nat.
{?x a :negative_nat. ?x :has_succ ?y.} <= {?y a :negative_nat}.

{
  ?LIST rdf:first ?FIRST .
} => {
  ?FIRST :memberof ?LIST .
} .
{
  ?R1 rdf:rest ?R .
  ?X :memberof ?R .
} => {
  ?X :memberof ?R1 .
} .

#"ahoj" :say "kato".

{?x :say ?y} <= {
    :dummy tau_builtins:output (?x ?y)^string_builtins:strXlst.
}.

{?x a :key_value_pair; :key ?K; :value ?V} <= {}.

{:dummy :is_with_replacement (rdf:nil rdf:nil ?replacement)} <= {
}.

{:dummy :is_with_replacement (?x_ ?y_ ?replacement)} <= {
    :dummy :replace (?xf ?yf ?replacement).
    :dummy :is_with_replacement (?xr ?yr ?replacement).
}.

{:dummy :replace (?x ?x ?replacement)} <= {
    ?x string_builtins:const_is_not_equal_to_const ?replacement!rdf:first.
}.

{:dummy :replace (?x ?y (?x ?y))} <= {
}.


{:dummy :from_x_put_first_y_items_into_z (?x_ ?y ?z_)} <= {
    ?p :has_succ ?y.
    ?xf :eq ?zf.
    :dummy :from_x_put_first_y_items_into_z (?xr ?p ?zr).
}.

{:dummy :from_x_put_first_y_items_into_z (?x :zero rdf:nil)} <= {
}.

{:dummy :from_x_put_first_y_items_into_z (rdf:nil ?remaining rdf:nil)} <= {
}.


{:dummy :from_x_put_until_y_into_z (?x_ ?y ?z_)} <= {
    ?x tau_builtins:things_are_different ?y.
    ?xf :eq ?zf.
    :dummy :from_x_put_until_y_into_z (?xr ?y ?zr).
}.

{:dummy :from_x_put_until_y_into_z (?xy ?xy rdf:nil)} <= {
}.

{:dummy :literally_string (?x0 ?rest ?value)} <= {
        ?value string_builtins:strXlst ?l.
        :dummy :literally_list (?x0 ?rest ?l).
}.

{:dummy :literally_list (?x_ ?rest ?value)} <= {
	?value rdf:first ?xf.
	?value rdf:rest ?vr.
	:dummy :literally_list (?xr ?rest ?vr).
}.

{:dummy :literally_list (?x0 ?x0 rdf:nil)} <= {
}.


:zero :has_succ :one.
:one :has_succ :two.
:two :has_succ :three.
:three :has_succ :four.
:four :has_succ :five.
:five :has_succ :six.
:six :has_succ :seven.
:seven :has_succ :eight.
:eight :has_succ :nine.
:nine :has_succ :ten.
:ten :has_succ :n11.
:n11 :has_succ :n12.
:n12 :has_succ :n13.
:n13 :has_succ :n14.
:n14 :has_succ :n15.
:n15 :has_succ :n16.
:n16 :has_succ :n17.
:n17 :has_succ :n18.
:n18 :has_succ :n19.
:n19 :has_succ :n20.
:n20 :has_succ :n21.
:n21 :has_succ :n22.
:n22 :has_succ :n23.
:n23 :has_succ :n24.
:n24 :has_succ :n25.
:n25 :has_succ :n26.
:n26 :has_succ :n27.
:n27 :has_succ :n28.
:n28 :has_succ :n29.
:n29 :has_succ :n30.
:n30 :has_succ :n31.
:n31 :has_succ :n32.
:n32 :has_succ :n33.
:n33 :has_succ :n34.
:n34 :has_succ :n35.
:n35 :has_succ :n36.
:n36 :has_succ :n37.
:n37 :has_succ :n38.
:n38 :has_succ :n39.
:n39 :has_succ :n40.
:n40 :has_succ :n41.
:n41 :has_succ :n42.
