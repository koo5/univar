
{(?x0 ?grammar ?nont) ldl:parse_nonterminal (?rest ?ast ?depth)} <= {
	?depth_predecessor :has_succ ?depth.
	?rule :memberof ?grammar.
		#:dummy tau_builtins:output "testing rule lhs...".
		#:dummy tau_builtins:serialize_thing ("found rule: " ?rule!:description)^string_builtins:strXlst.
	    #:dummy tau_builtins:output ?depth.
		#:dummy :shorten_location_printout (?x0 ?x0_shortened).
		#?x0_shortened_string string_builtins:strXlst ?x0_shortened.
		#:dummy tau_builtins:serialize_thing ("""invoking rule on """" ?x0_shortened_string """"...""")^string_builtins:strXlst.
}.

{(?x0 ?rule ?nont) ldl:parse_nonterminal2 (?rest ?ast ?depth)} <= {
    ?rule a ldl:compound; :type "builtins/grammar".
	?rule :lhs ?nont. ?rule :rhs ?rhs.
	(?x0 ?grammar ?nont ?rhs) :parse_rhs (?rest ?ast ?depth).
}.

{(?x0 ?grammar ?type rdf:nil) :parse_rhs (?x0 ?ast ?depth)} <= {
	?ast a ldl:compound. ?ast :type ?type. ?ast :children rdf:nil.
}.

{(?x0 ?grammar ?type (?one_rhs_item)) :parse_rhs (?rest ?ast ?depth)} <= {
	(?x0 ?grammar ?one_rhs_item) :parse_rhs_item (?rest ?ast ?depth).
}.

{(?x0 ?grammar ?type ?rhs) :parse_rhs (?rest ?ast ?depth)} <= {
    ?rhs rdf:rest ?rhs2_not_nil. ?rhs2_not_nil rdf:rest ?rhs3.
	?ast a ldl:compounde. ?ast :type ?type. ?ast :children ?ch.
	(?x0 ?grammar ?rhs) :parse_rhs_items (?rest ?ch ?depth).
}.

{(?x0 ?grammar ?rhs_) :parse_rhs_items (?rest ?ch_ ?depth)} <= {
	(?x0 ?grammar ?rhsf) :parse_rhs_item (?after_item ?chf ?depth).
	(?after_item ?grammar ?rhsr) :parse_rhs_items (?rest ?chr ?depth).
}.

{(?x0 ?grammar rdf:nil) :parse_rhs_items (?x0 rdf:nil ?depth)} <= {}.

{(?x0 ?grammar ?rhs_item) :parse_rhs_item (?rest ?ast ?depth)} <= {
	?rhs_item a ldl:literal. ?rhs_item :value ?v.
	?ast a ldl:literal. ?ast :value ?v.
	:dummy :literally_string (?x0 ?rest ?v).
}.

{(?x_ ?grammar ?rhs_item) :parse_rhs_item (?xr ?ast ?depth)} <= {
	?rhs_item a ldl:compound; :type "builtins/any_char_except"; :children ([:value [:value ?except]]).
	?xf string_builtins:any_char_except ?except.
 	?ast a :literal. ?ast :value ?xf.
}.

{(?x0 ?grammar ?rhs_item) :parse_rhs_item (?rest ?ast ?depth)} <= {
	?rhs_item a :all_chars_until_one_of. ?rhs_item :value ?except.
#	    :dummy tau_builtins:output "parse_rhs_item(all_chars_until_one_of):".
#	    :dummy tau_builtins:output ?depth.
 	?ast a :literal. ?ast :value ?string.
	?x0 :all_chars_until_one_of (?rest ?except ?char_list).
    ?string string_builtins:strXlst ?char_list.
}.

{?a0 :parse_rhs_item ?a1} <= {
    (?x0 ?grammar [a :identifier; :name ?name]) :eq ?a0. ?a1 :eq (?rest ?ast ?depth).
 #       :dummy tau_builtins:output "parse_rhs_item(nont):".
#		:dummy tau_builtins:output ?name.
#	    :dummy tau_builtins:output ?depth.
	(?x0 ?grammar ?name) :parse_nonterminal (?rest ?ast ?depth).
#        :dummy tau_builtins:output "parse_rhs_item(nont) yield".
}.

{(?x0 ?grammar ?rhs_item) :parse_rhs_item (?rest ?ast ?depth)} <= {
	?rhs_item a :builtin_postprocessed. ?rhs_item :value ?raw_identifier.
#        :dummy tau_builtins:output "parse_rhs_item(builtin_postprocessed)...".
#	    :dummy tau_builtins:output ?depth.
	(?x0 ?grammar ?raw_identifier!:name) :parse_nonterminal (?rest ?raw_ast ?depth).
#        :dummy tau_builtins:output "parse_rhs_item(builtin_postprocessed) parsed the raw input.".
	?raw_ast :postprocess ?ast.
#	    :dummy tau_builtins:output "parse_rhs_item(builtin_postprocessed) postprocessed.".
}.

{?x_ :all_chars_until_one_of (?rest ?except ?char_list_).} <= {
    ?xf string_builtins:any_char_except ?except.
    ?char_listf :eq ?xf.
    ?xr :all_chars_until_one_of (?rest ?except ?char_listr).
}.

{rdf:nil :all_chars_until_one_of (rdf:nil ?except rdf:nil).} <= {
}.

{?x_ :all_chars_until_one_of (?x_ ?except rdf:nil).} <= {
    ?except string_builtins:strXlst ?except_list.
    ?xf :memberof ?except_list.
}.

{?raw :postprocess ?cooked} <= {
#	    :dummy tau_builtins:output "postprocess:".
	    #:dummy tau_builtins:output ?raw.
    ?raw :type ?type.
#    "postprocessing a " :say ?type.
    ?type :eq "string_literal_raw_body".
#    "postprocessing... " :say "".
    ?cooked :eq [a :literal; :value ?v].
#    "postprocessing.... " :say "".
    ?v_list :is_collected_string_literal_raw_body ?raw.
#    "postprocessing..... " :say "".
    #:dummy tau_builtins:output ?v_list.
    ?v string_builtins:strXlst ?v_list.
#    "postprocessing yields " :say ?v.
}.

{rdf:nil :is_collected_string_literal_raw_body ?raw} <= {
 #   :dummy tau_builtins:output ":is_collected_string_literal_raw_body nil?".
    ?raw :children rdf:nil.
#    :dummy tau_builtins:output ":is_collected_string_literal_raw_body nil!".
}.

{?v_ :is_collected_string_literal_raw_body ?raw} <= {
#    :dummy tau_builtins:output ":is_collected_string_literal_raw_body?".
    #:dummy tau_builtins:output ?v.
    #:dummy tau_builtins:output ?raw.
    ?raw :children ([:value ?value] ?tail).
#    :dummy tau_builtins:output ":is_collected_string_literal_raw_body...".
    ?vf :eq ?value.
#        :dummy tau_builtins:output ":is_collected_string_literal_raw_body....".
    ?vr :is_collected_string_literal_raw_body ?tail.
#        :dummy tau_builtins:output ":is_collected_string_literal_raw_body!".

}.





{:dummy :shorten_location_printout (?x0 ?shortened)} <= {
    :dummy :from_x_put_first_y_items_into_z (?x0 :n42 ?shortened).
}.

