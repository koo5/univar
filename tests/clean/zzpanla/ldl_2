{?x a :builtins} <= {
    ?x a :node; :type "builtins/module"; :children (
        [a :node; :type "builtins/statements"; :has_role "statements"; :has_items
        (
            #newline ++> [\\n].
            [a :node; :type "builtins/grammar"; :children (
                [a :node; :type "builtins/node_name_unquoted"; :children (
                    [a :node; :type "builtins/string_literal"; :value "newline"]

statement works as top_level_item.
newline works as top_level_item.
statements is a series of top_level_item separated with newline.








#string_literal ++> [\\[], string_literal_body, [\\]].
    :string_literal a :node; :type :grammar.
    :string_literal__name a :node;
        :type :node_name_unquoted;
        string_literal__name_ch0



    :string_literal_grammar_items a :node; :type :grammar_items; :has_items
    (
        [a :string_literal; :value "["]
        [a :node_name_unquoted; :has_children ([a :node; :type :string_literal; :value "string_literal_body"])
        [a :string_literal; :value "]"]
    ).

#string_literal_body is a series of string_literal_body_item.
:string_literal_body a :node; :type :series.
:string_literal_body__string_literal_body_item a :node; :type :node_name_unquoted;
    :has_children (


string_literal_body_item ++> any char except [\\n\\[\\]\\\\].
string_literal_body_item ++> [\\\\n].
string_literal_body_item ++> [\\\\\\[].
string_literal_body_item ++> [\\\\\\]].
string_literal_body_item ++> [\\\\\\\\].

#node_name is a category.
node_name_unquoted works as node_name.
node_name_unquoted ++> string_literal_body.
node_name_quoted works as node_name.
node_name_quoted ++> string_literal.

statements is a series of statement separated with newline.

x_is_a_series_of_y_separated_with_z works as statement.
x_is_a_series_of_y_separated_with_z ++> node_name, [ is a series of ], item_type:node_name, [ separated with ], separator:string_literal, [.].

subtype works as statement.
subtype ++> sub:node_name, [ works as ], sup:node_name, [.].

grammar works as statement.
grammar ++> node_name, [ ++> ], grammar_items, [.].

grammar_items is a series of grammar_item separated with [, ].
#grammar_item is a category.

string_literal works as grammar_item.
node_name works as grammar_item.
node_name_with_child_name works as grammar item.
node_name_with_child_name ++> child_name:node_name, [:], type_name:node_name.

comment works as statement.
comment ++> [#], comment_body.
comment_body ++> all chars until one of [\\n].
