
#parse the "++" text through the initial grammar

:zero :has_succ :one.
:one :has_succ :two.
:two :has_succ :three.
:three :has_succ :four.
:four :has_succ :five.
:five :has_succ :six.
:six :has_succ :seven.
:seven :has_succ :eight.
:eight :has_succ :nine.
:nine :has_succ :ten.
:ten :has_succ :n11.
:n11 :has_succ :n12.
:n12 :has_succ :n13.
:n13 :has_succ :n14.
:n14 :has_succ :n15.
:n15 :has_succ :n16.
:n16 :has_succ :n17.
:n17 :has_succ :n18.
:n18 :has_succ :n19.
:n19 :has_succ :n20.
:n20 :has_succ :n21.
:n21 :has_succ :n22.
:n22 :has_succ :n23.
:n23 :has_succ :n24.
:n24 :has_succ :n25.
:n25 :has_succ :n26.
:n26 :has_succ :n27.
:n27 :has_succ :n28.
:n28 :has_succ :n29.
:n29 :has_succ :n30.
:n30 :has_succ :n31.
:n31 :has_succ :n32.
:n32 :has_succ :n33.
:n33 :has_succ :n34.
:n34 :has_succ :n35.
:n35 :has_succ :n36.
:n36 :has_succ :n37.
:n37 :has_succ :n38.
:n38 :has_succ :n39.
:n39 :has_succ :n40.
:n40 :has_succ :n41.
:n41 :has_succ :n42.

{:dummy :shorten_location_printout (?x0 ?shortened)} <= {
    :dummy :from_x_put_first_y_items_into_z (?x0 :n42 ?shortened).
}.

{:dummy :escape_newlines_in_list (?x ?y)} <= {
    :dummy :is_with_replacement (?x ?y ("\n" "\\n")).
}.

{(?x0 ?grammar ?nont) :parse_nonterminal (?rest ?ast ?depth)} <= {
    :dummy tau_builtins:toggle_tracing_active :dummy.
	?depth_predecessor :has_succ ?depth.
	?rule :memberof ?grammar.
		:dummy tau_builtins:output "testing rule lhs...".
	?rule :lhs ?nont. ?rule :rhs ?rhs.
		"found rule: " :say ?rule!:description.
	    :dummy tau_builtins:output ?depth.
		#:dummy tau_builtins:output "invoking rule on ...".
		:dummy :shorten_location_printout (?x0 ?x0_shortened).
		:dummy :escape_newlines_in_list (?x0_shortened ?x0_shortened_escaped).
		?x0_shortened_escaped_string string_builtins:strXlst ?x0_shortened_escaped.
		:dummy tau_builtins:output  ("""invoking rule on """" ?x0_shortened_escaped_string """"...""")^string_builtins:strXlst.
    :dummy tau_builtins:toggle_tracing_active :dummy.
	(?x0 ?grammar ?nont ?rhs) :parse_rhs (?rest ?ast ?depth_predecessor).
}.

{(?x0 ?grammar ?type rdf:nil) :parse_rhs (?x0 ?ast ?depth)} <= {
        :dummy tau_builtins:output "parse_rhs nil".
 #       :dummy tau_builtins:output ?depth.
	?ast a :node. ?ast :type ?type. ?ast :children rdf:nil.
        :dummy tau_builtins:output "parse_rhs nil yield".
}.

{(?x0 ?grammar ?type (?one_rhs_item)) :parse_rhs (?rest ?ast ?depth)} <= {
        :dummy tau_builtins:output "parse_rhs one".
#	    :dummy tau_builtins:output ?depth.
	(?x0 ?grammar ?one_rhs_item) :parse_rhs_item (?rest ?ast ?depth).
        :dummy tau_builtins:output "parse_rhs one yield".
}.

{(?x0 ?grammar ?type ?rhs) :parse_rhs (?rest ?ast ?depth)} <= {
    ?rhs rdf:rest ?rhs2_not_nil. ?rhs2_not_nil rdf:rest ?rhs3.
        :dummy tau_builtins:output "parse_rhs 2..".
#	    :dummy tau_builtins:output ?depth.
	?ast a :node. ?ast :type ?type. ?ast :children ?ch.
	(?x0 ?grammar ?rhs) :parse_rhs_items (?rest ?ch ?depth).
        :dummy tau_builtins:output "parse_rhs 2 yield".
}.

{(?x0 ?grammar ?rhs_) :parse_rhs_items (?rest ?ch_ ?depth)} <= {
		:dummy tau_builtins:output "parse_rhs_items".
#	    :dummy tau_builtins:output ?depth.
	    :dummy tau_builtins:output "parse_rhs_item:".
	    :dummy tau_builtins:output (?x0 ?rhsf ?after_item ?chf).
	(?x0 ?grammar ?rhsf) :parse_rhs_item (?after_item ?chf ?depth).
		:dummy tau_builtins:output "parse_rhs_items progress".
	(?after_item ?grammar ?rhsr) :parse_rhs_items (?rest ?chr ?depth).
		:dummy tau_builtins:output "parse_rhs_items yield".
}.

{(?x0 ?grammar rdf:nil) :parse_rhs_items (?x0 rdf:nil ?depth)} <= {
		:dummy tau_builtins:output "parse_rhs_items nil".
}.

{(?x0 ?grammar ?rhs_item) :parse_rhs_item (?rest ?ast ?depth)} <= {
	?rhs_item a :literal. ?rhs_item :value ?dcgv. 
	?astv string_builtins:strXlst ?dcgv.
		:dummy tau_builtins:output "parse_rhs_item(lit):".
		?dummy tau_builtins:output ?astv.
#	    :dummy tau_builtins:output ?depth.
	?ast a :literal. ?ast :value ?astv.
	:dummy :literally_list (?x0 ?rest ?dcgv).
	    ?dummy tau_builtins:output ?astv.
	    ?dummy tau_builtins:output "literal matches".
}.

{(?x_ ?grammar ?rhs_item) :parse_rhs_item (?xr ?ast ?depth)} <= {
	?rhs_item a :any_char_except. ?rhs_item :value ?except.
		:dummy tau_builtins:output "parse_rhs_item(any char except):".
#	    :dummy tau_builtins:output ?depth.
	?xf string_builtins:any_char_except ?except.
 	?ast a :literal. ?ast :value ?xf.
}.

{(?x0 ?grammar ?rhs_item) :parse_rhs_item (?rest ?ast ?depth)} <= {
	?rhs_item a :all_chars_until_one_of. ?rhs_item :value ?except.
	    :dummy tau_builtins:output "parse_rhs_item(all_chars_until_one_of):".
#	    :dummy tau_builtins:output ?depth.
 	?ast a :literal. ?ast :value ?string.
	?x0 :all_chars_until_one_of (?rest ?except ?char_list).
    ?string string_builtins:strXlst ?char_list.
}.

{?a0 :parse_rhs_item ?a1} <= {
    (?x0 ?grammar [a :identifier; :name ?name]) :eq ?a0. ?a1 :eq (?rest ?ast ?depth).
        :dummy tau_builtins:output "parse_rhs_item(nont):".
		:dummy tau_builtins:output ?name.
#	    :dummy tau_builtins:output ?depth.
	(?x0 ?grammar ?name) :parse_nonterminal (?rest ?ast ?depth).
        :dummy tau_builtins:output "parse_rhs_item(nont) yield".
}.

{(?x0 ?grammar ?rhs_item) :parse_rhs_item (?rest ?ast ?depth)} <= {
	?rhs_item a :builtin_postprocessed. ?rhs_item :value ?raw_identifier.
        :dummy tau_builtins:output "parse_rhs_item(builtin_postprocessed)...".
#	    :dummy tau_builtins:output ?depth.
	(?x0 ?grammar ?raw_identifier!:name) :parse_nonterminal (?rest ?raw_ast ?depth).
        :dummy tau_builtins:output "parse_rhs_item(builtin_postprocessed) parsed the raw input.".
	?raw_ast :postprocess ?ast.
	    :dummy tau_builtins:output "parse_rhs_item(builtin_postprocessed) postprocessed.".
}.

{?x_ :all_chars_until_one_of (?rest ?except ?char_list_).} <= {
    ?xf string_builtins:any_char_except ?except.
    ?char_listf :eq ?xf.
    ?xr :all_chars_until_one_of (?rest ?except ?char_listr).
}.

{rdf:nil :all_chars_until_one_of (rdf:nil ?except rdf:nil).} <= {
}.

{?x_ :all_chars_until_one_of (?x_ ?except rdf:nil).} <= {
    ?except string_builtins:strXlst ?except_list.
    ?xf :memberof ?except_list.
}.

{?raw :postprocess ?cooked} <= {
	    :dummy tau_builtins:output "postprocess:".
	    :dummy tau_builtins:output ?raw.
    ?raw :type ?type.
    "postprocessing a " :say ?type.
    ?type :eq "string_literal_raw_body".
    "postprocessing... " :say "".
    ?cooked :eq [a ldl:literal; :type :string_literal_body; :value ?v].
    "postprocessing.... " :say "".
    ?v_list :is_collected_string_literal_raw_body ?raw.
    "postprocessing..... " :say "".
    :dummy tau_builtins:output ?v_list.
    ?v string_builtins:strXlst ?v_list.
    "postprocessing yields " :say ?v.
}.

{rdf:nil :is_collected_string_literal_raw_body ?raw} <= {
    :dummy tau_builtins:output ":is_collected_string_literal_raw_body nil?".
    ?raw :children rdf:nil.
    :dummy tau_builtins:output ":is_collected_string_literal_raw_body nil!".
}.

{?v_ :is_collected_string_literal_raw_body ?raw} <= {
    :dummy tau_builtins:output ":is_collected_string_literal_raw_body?".
    :dummy tau_builtins:output ?v.
    :dummy tau_builtins:output ?raw.
    ?raw :children ([:value ?value] ?tail).
    :dummy tau_builtins:output ":is_collected_string_literal_raw_body...".
    ?vf :eq ?value.
        :dummy tau_builtins:output ":is_collected_string_literal_raw_body....".
    ?vr :is_collected_string_literal_raw_body ?tail.
        :dummy tau_builtins:output ":is_collected_string_literal_raw_body!".

}.


