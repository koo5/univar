
:initial_ldl_text :has_value
"""
newline ++> [\\n].

statements ++> a series of top_level_item separated with newline.

top_level_item ++> newline.
top_level_item ++> statement.
top_level_item ++> comment.

comment ++> [#], all chars until one of [\\n].

statement ++> grammar.
grammar ++> node_name, [ ++> ], grammar_items.
#alternative syntax for grammar is node_name, [ has syntax ], grammar_items.

grammar_items ++> a series of grammar_item separated with [, ].

grammar_item ++> string.
grammar_item ++> node_name.

grammar_item ++> node_name_with_child_name.
node_name_with_child_name ++> child_name:node_name, [:], type_name:node_name.

grammar_item ++> a_series_of_y_separated_with_z.
a_series_of_y_separated_with_z ++> [a series of ], item_type:grammar_item, [ separated with ], separator:grammar_item.

grammar_item ++> builtin_postprocessed.
builtin_postprocessed ++> [builtin-postprocessed ], node_name.

node_name ++> identifier.
identifier ++> builtin-postprocessed raw_identifier.
raw_identifier ++> [], a series of any char except [\\n\\[\\]\\\\ ] separated with [].

string_literal ++> builtin-postprocessed raw_string_literal.
raw_string_literal ++> [\\[], raw_string_literal_body, [\\]].
raw_string_literal_body ++> a series of raw_string_literal_body_item separated with [].

raw_string_literal_body_item ++> any char except [\\n\\[\\]\\\\].
raw_string_literal_body_item ++> [\\\\n].
raw_string_literal_body_item ++> [\\\\\\[].
raw_string_literal_body_item ++> [\\\\\\]].
raw_string_literal_body_item ++> [\\\\\\\\].
""";
:has_comment """
this is a declarative definition of the basic building blocks of the ldl and their grammar.
probably just dcg + "any char except" +  optional child names + "indent"/"dedent" special syntax items...
""";
:has_comment """
worksas / accepts:
===
sometimes, as in this example:
```
grammar_items --> grammar_item, [, ], grammar_items.
grammar_items --> grammar_item, [].
grammar_items --> .
```
we may want to have a syntax end with ", [].". This is so that the grammar_items node
is explicitly created, with the grammar_item as its child, as opposed to the grammar_item
node just being passed through.
An alternative language to this is one with an "accepts" keyword, for example
```
grammar_items accepts grammar_item.
```
(or "works as" with arguments reversed),
to express the passthrough, and with the semantics of one-item grammar lists changed to not
mean the passthrough. Transforming grammars from one form to the other should be trivial.
""".
