@keywords a .
@prefix rdf:      <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix string_builtins: <http://loworbit.now.im/rdf/string_builtins#>.
@prefix tau_builtins: <http://loworbit.now.im/rdf/tau_builtins#>.

@prefix : <file://>.


kb


?builtins_aware_list rdf:first ?ITEM; rdf:rest ?REST.



{
  ?LIST rdf:first ?FIRST .
} => {
  ?FIRST :memberof ?LIST .
} .
{
  ?R1 rdf:rest ?R .
  ?X :memberof ?R .
} => { 
  ?X :memberof ?R1 .
} .


#data declarations
{?x a :statement.  ?x :lhs ?Y. ?x :rhs ?Z} <= {}.
{?x a :newline} <= {}.



{?x a :letter} <= { "_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" string_builtins:is_split ?l. ?x :memberof ?l.}.
{?x a :number} <= { "0123456789" string_builtins:is_split ?l. ?x :memberof ?l.}.
{?x a :alphanum} <= {?x a :letter}.
{?x a :alphanum} <= {?x a :number}.



{?x0 :statement (?rest ?ast)} <= {
	?x0 :identifier (?rest ?name).
	?ast a :statement. ?ast :lhs ?name.
}.

{?x0 :identifier (?rest ?name)} <= {
	?x0 rdf:first ?f. ?f a :letter.
	?name rdf:first ?f. ?name rdf:rest ?rest_of_name.
	?x0 rdf:rest ?r. ?r :rest_of_name (?rest ?rest_of_name).
}.


{?x0 :rest_of_name (?x0 rdf:nil)} <= {
}.

{?x0 :rest_of_name (?rest ?name)} <= {
	?x0 rdf:first ?f. ?f a :alphanum. :dummy tau_builtins:output "rest of name:". :dummy tau_builtins:output ?f.
	?name rdf:first ?f. ?name rdf:rest ?name_rest.
	?x0 rdf:rest ?r. ?r :rest_of_name (?rest ?name_rest).
}.

{?x0 :newline ?rest} <= {
	?x0 rdf:first ?f.
	:dummy tau_builtins:output "newline?:".
	:dummy tau_builtins:output ?f.
	?x0 rdf:first "\n". ?x0 rdf:rest ?rest.
	:dummy tau_builtins:output "yes".

}.

#statement_lines --> statement_line, statement_lines.
{?x0 :statement_lines (?rest ?items)} <= {
	?items rdf:first ?item. ?items rdf:rest ?items_rest.
	?x0 :statement_line (?after_line ?item).
	?after_line :statement_lines (?rest ?items_rest).
}.

#statement_lines --> .
{?x0 :statement_lines (?x0 rdf:nil)} <= {
}.

#statement_line --> newline.
{?x0 :statement_line (?rest ?item)} <= {
	?x0 :newline ?rest.
	?item a :newline.
}.

#statement_line --> statement, newline.
{?x0 :statement_line (?rest ?item)} <= {
	?x0 :statement (?after_statement ?item).
	?after_statement :newline ?rest.
}.


fin.


query
"""
sentence --> noun_phrase, verb_phrase.
noun_phrase --> determiner, noun.
verb_phrase --> verb, noun_phrase.
verb_phrase --> verb, sentence.

determiner --> [the].
determiner --> [a].
noun --> [cat].
noun --> [mouse].
verb --> [scares].
verb --> [hates].
""" string_builtins:is_split ?l. 
?l :parses_to_dcg_with_rest (rdf:nil ?tree). ?what :parses_to_dcg_with_rest (rdf:nil ?tree). ?what string_builtins:is_joined ?output .
fin.
shouldbetrue

query
"""
sentence --> noun_phrase, verb_phrase.
noun_phrase --> determiner, noun.
verb_phrase --> verb, noun_phrase.
verb_phrase --> verb, sentence.

determiner --> [the].
determiner --> [a].
noun --> [cat].
noun --> [mouse].
verb --> [scares].
verb --> [hates].
""" string_builtins:is_split ?l. 
?l :parses_to_dcg_with_rest (rdf:nil ?tree). ?tree :dcg_ast2tau_ast ?tau. ?tau :tau_ast2list_of_chars ?l2. ?l2 string_builtins:is_joined ?output .
fin.
shouldbetrue
